{"version":3,"sources":["components/navbar.js","components/wrapper.js","components/card.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","class","score","topScore","Wrapper","className","children","Card","alt","name","src","image","onClick","clickedCard","id","App","state","character","_this","includes","setState","alert","concat","newArray","push","i","length","j","Math","floor","random","_ref","console","log","_this2","this","navbar","wrapper","map","card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6rBAaeA,MAVf,SAAgBC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,UACTH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,qEACAF,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMK,MAAtB,sBAAgDL,EAAMM,YCD7CC,MAJf,SAAiBP,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WAAWR,EAAMS,WCS1BC,MAVf,SAAcV,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iBACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,UAAUG,IAAKX,EAAMY,KAAMC,IAAKb,EAAMc,MAAOC,QAAS,kBAAMf,EAAMgB,YAAYhB,EAAMiB,iBCmD9FC,6MAjDbC,MAAQ,CACNC,YACAH,GAAI,GACJZ,MAAO,EACPC,SAAU,KAGZU,YAAc,SAACC,GACb,GAAII,EAAKF,MAAMF,GAAGK,SAASL,GACzBI,EAAKE,SAAS,CAACN,GAAI,GAAIZ,MAAO,IAC9BmB,MAAK,qBAAAC,OAAuBJ,EAAKF,MAAMd,MAAlC,aACA,CACL,IAAIqB,EAAWL,EAAKF,MAAMF,GAC1BS,EAASC,KAAKV,GACdI,EAAKE,SAAS,CAACN,GAAIS,EAAUrB,MAAQgB,EAAKF,MAAMd,MAAO,GAAK,WACtDgB,EAAKF,MAAMb,SAAWe,EAAKF,MAAMd,OACnCgB,EAAKE,SAAS,CAACjB,SAAUe,EAAKF,MAAMb,SAAU,MAIpD,IAAK,IAAIsB,EAAIR,EAAUS,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC7C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADKM,EAEd,CAACd,EAAUU,GAAIV,EAAUQ,IAAvDR,EAAUQ,GAFkCM,EAAA,GAE9Bd,EAAUU,GAFoBI,EAAA,GAI/CC,QAAQC,IAAIf,EAAKF,MAAMF,6EAGf,IAAAoB,EAAAC,KACV,OACErC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoC,EAAD,CACAlC,MAAOiC,KAAKnB,MAAMd,MAClBC,SAAUgC,KAAKnB,MAAMb,WAErBL,EAAAC,EAAAC,cAACqC,EAAD,KACCF,KAAKnB,MAAMC,UAAUqB,IAAI,SAAArB,GACxB,OAAOnB,EAAAC,EAAAC,cAACuC,EAAD,CACPzB,GAAIG,EAAUH,GACd0B,IAAKvB,EAAUH,GACfH,MAAOM,EAAUN,MACjBE,YAAaqB,EAAKrB,yBAzCR4B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.19c37115.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\n\nfunction Navbar(props) {\n  return (\n    <div class=\"navBar\">\n      <h1>Clicky Game!</h1>\n      <h3>Test your memory and only click on each character once.</h3>\n      <p>Your Score: {props.score} | Your Top Score: {props.topScore}</p>\n    </div>\n  );\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"../App.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"../App.css\";\n\nfunction Card(props) {\n  return (\n      <div className=\"card\" >\n        <div className=\"img-container\">\n          <img className=\"cardImg\" alt={props.name} src={props.image} onClick={() => props.clickedCard(props.id)} />\n        </div>\n      </div>\n  );\n}\n\nexport default Card;\n","import React, {Component} from \"react\";\nimport Navbar from \"./components/navbar\";\nimport Wrapper from \"./components/wrapper\";\nimport Card from \"./components/card\";\nimport character from \"./character.json\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n  state = {\n    character,\n    id: [], \n    score: 0,\n    topScore: 0\n  }\n\n  clickedCard = (id) =>{\n    if (this.state.id.includes(id)) {\n      this.setState({id: [], score: 0})\n      alert (`Nice work you got ${this.state.score}/12!`)\n    } else {\n      let newArray = this.state.id\n      newArray.push(id)\n      this.setState({id: newArray, score: (this.state.score +1)}, ()=>{\n        if (this.state.topScore < this.state.score) {\n          this.setState({topScore: this.state.topScore +1})\n        } \n      })\n    }\n    for (let i = character.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [character[i], character[j]] = [character[j], character[i]];\n    }\n    console.log(this.state.id)\n  }\n\n  render () {\n  return (\n    <div>\n      <Navbar \n      score={this.state.score}\n      topScore={this.state.topScore}\n      />\n      <Wrapper>\n      {this.state.character.map(character => {\n        return <Card \n        id={character.id}\n        key={character.id}\n        image={character.image}\n        clickedCard={this.clickedCard}\n        />\n      })}\n      </Wrapper>\n    </div>\n  )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}